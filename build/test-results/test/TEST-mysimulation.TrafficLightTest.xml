<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="mysimulation.TrafficLightTest" tests="37" skipped="0" failures="1" errors="0" timestamp="2025-06-11T08:35:28" hostname="DESKTOP-BPTHFCI" time="0.522">
  <properties/>
  <testcase name="isConflict_PerpendicularWithDivisibleCycles_ReturnsTrue()" classname="mysimulation.TrafficLightTest" time="0.006"/>
  <testcase name="max_FirstArgumentLarger_ReturnsFirst()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[1] NORTH, EAST, true" classname="mysimulation.TrafficLightTest" time="0.088"/>
  <testcase name="[2] NORTH, WEST, true" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[3] SOUTH, EAST, true" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[4] SOUTH, WEST, true" classname="mysimulation.TrafficLightTest" time="0.002"/>
  <testcase name="[5] EAST, NORTH, true" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[6] WEST, NORTH, true" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[7] NORTH, SOUTH, false" classname="mysimulation.TrafficLightTest" time="0.002"/>
  <testcase name="[8] EAST, WEST, false" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[9] SOUTH, SOUTH, false" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="min_SecondArgumentSmaller_ReturnsSecond()" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <testcase name="min_FirstArgumentSmaller_ReturnsFirst()" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <testcase name="constructor_PositiveCycleLength_SetsInitialStateToRed()" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <testcase name="min_EqualArguments_ReturnsEither()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="update_TimerAtMultipleCycles_ChangesStateAppropriately()" classname="mysimulation.TrafficLightTest" time="0.001">
    <failure message="org.opentest4j.AssertionFailedError: expected: &lt;GREEN&gt; but was: &lt;RED&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: expected: &lt;GREEN&gt; but was: &lt;RED&gt;
	at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
	at app//org.junit.jupiter.api.AssertionUtils.failNotEqual(AssertionUtils.java:62)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:177)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1141)
	at app//mysimulation.TrafficLightTest.update_TimerAtMultipleCycles_ChangesStateAppropriately(TrafficLightTest.java:138)
	at java.base@21.0.7/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.7/java.lang.reflect.Method.invoke(Method.java:580)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at app//org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.7/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@21.0.7/java.util.ArrayList.forEach(ArrayList.java:1596)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:119)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:94)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:89)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base@21.0.7/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base@21.0.7/java.lang.reflect.Method.invoke(Method.java:580)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="constructor_NonPositiveCycleLength_ThrowsException()" classname="mysimulation.TrafficLightTest" time="0.013"/>
  <testcase name="[1] 0" classname="mysimulation.TrafficLightTest" time="0.003"/>
  <testcase name="[2] 2" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[3] 4" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[4] 6" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[5] 8" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[6] -2" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[7] -4" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="isConflict_PerpendicularWithNonDivisibleCycles_ReturnsFalse()" classname="mysimulation.TrafficLightTest" time="0.006"/>
  <testcase name="max_SecondArgumentLarger_ReturnsSecond()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[1] 1" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[2] 3" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[3] 5" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <testcase name="[4] 7" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[5] -1" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="[6] -3" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="setState_NewState_UpdatesCurrentState()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="max_EqualArguments_ReturnsEither()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="update_TimerAtFullCycle_ChangesToRed()" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <testcase name="update_TimerAtHalfCycle_ChangesToGreen()" classname="mysimulation.TrafficLightTest" time="0.001"/>
  <testcase name="isConflict_ParallelDirections_ReturnsFalse()" classname="mysimulation.TrafficLightTest" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
